dim(tweets$train)
dim(tweets$test)
politicsData <- tweets
train_code <- as.factor(politicsData$train$message)
test_code <- as.factor(politicsData$test$message)
train_code
train_code[1:100]
politicsData$train[1:10]
politicsData$train$label[1:10]
train_code <- as.factor(politicsData$train$label)
train_code
test_code <- as.factor(politicsData$test$label)
test_code
prepareTfIdfWithLabels(politicsData)
prepareTfIdfWithLabels(politicsData)
prepareTfIdfWithLabels(politicsData)
politicsData
rawMatrices <- createRawMatrices(politicsData, sparseLevel=.998, ngramLength = 1)
train.data = politicsData$train
test.data = politicsData$test
train_doc_matrix <- create_matrix(train.data$concat, language="english", removeNumbers=FALSE, stemWords=FALSE,
removeSparseTerms=0.98, ngramLength=1)
train_doc_matrix <- create_matrix(train.data$concat, language="english", removeNumbers=FALSE, stemWords=FALSE,
removeSparseTerms=0.98, ngramLength=1)
train.data
train.data[1:5,]
train_doc_matrix <- create_matrix(train.data$text, language="english", removeNumbers=FALSE, stemWords=FALSE,
removeSparseTerms=0.98, ngramLength=1)
train_doc_matrix
train_doc_matrix[1:10,]
prepareTfIdfWithLabels(politicsData)
source('./preprocessing.R')
prepareTfIdfWithLabels(politicsData)
source('C:/doc/s/sem2/chudy/repo/pub_lda/./preprocessing.R')
source('./preprocessing.R')
filePath = 'C:/doc/s/sem2/chudy/repo/pub_lda/politiciants data.csv'
tweetsAll <- cleanData(filePath)
tweetsAllLabelsNumeric <- labelsToNumeric(tweetsAll)
tweets <- partitionData(tweetsAllLabelsNumeric)
dim(tweets$train)
dim(tweets$test)
politicsData <- tweets
prepareTfIdfWithLabels(politicsData)
source('./preprocessing.R')
lda <- calculateLDA(tfData, 10)
source('./preprocessing.R')
lda <- calculateLDA(tfData, 10)
source('./preprocessing.R')
lda <- calculateLDA(tfData, 10)
source('./preprocessing.R')
filePath = 'C:/doc/s/sem2/chudy/repo/pub_lda/politiciants data.csv'
tweetsAll <- cleanData(filePath)
tweetsAllLabelsNumeric <- labelsToNumeric(tweetsAll)
tweets <- partitionData(tweetsAllLabelsNumeric)
dim(tweets$train)
dim(tweets$test)
politicsData <- tweets
tfData <- prepareTfIdfWithLabels(politicsData)
lda <- calculateLDA(tfData, 10)
lda
posterior(lda$topicmodel)[2]
setwd('C:/doc/s/sem2/chudy/repo/pub_lda')
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
r1 <- trainAndPredict(tree_number, lda1$ldaTrainData, cleanedData1$cleanedTrainLabels,
lda1$ldaTestData, cleanedData1$cleanedTestLabels)
source('./classification.R')
r1 <- trainAndPredict(tree_number, lda1$ldaTrainData, cleanedData1$cleanedTrainLabels,
lda1$ldaTestData, cleanedData1$cleanedTestLabels)
plotResults(r1$testResult$threshold, r1$testResult$bridgeRatio, r1$testResult$errorRatio)
res <- trainAndPredict(tree_number, lda$ldaTrainData, tfData$cleanedTrainLabels,
lda$ldaTestData, tfData$cleanedTestLabels)
plotResults(res$testResult$threshold, res$testResult$bridgeRatio, res$testResult$errorRatio)
res
res$model
setwd('C:/doc/s/sem2/chudy/repo/pub_lda')
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
tree_number <- 500
topic_number <- 30
filePath = 'C:/doc/s/sem2/chudy/repo/pub_lda/politiciants data.csv'
tweetsAll <- cleanData(filePath)
tweetsAllLabelsNumeric <- labelsToNumeric(tweetsAll)
tweets <- partitionData(tweetsAllLabelsNumeric)
dim(tweets$train)
dim(tweets$test)
politicsData <- tweets
tfData <- prepareTfIdfWithLabels(politicsData)
lda <- calculateLDA(tfData, topic_number)
posterior(lda$topicmodel)[2]
res <- trainAndPredict(tree_number, lda$ldaTrainData, tfData$cleanedTrainLabels,
lda$ldaTestData, tfData$cleanedTestLabels)
tweets$train
tweets$train[1:10,]
tfData$cleanedTrainMatrix
setwd('C:/doc/s/sem2/chudy/repo/pub_lda')
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
tree_number <- 500
topic_number <- 30
filePath = 'C:/doc/s/sem2/chudy/repo/pub_lda/politiciants data.csv'
tweetsAll <- cleanData(filePath)
tweetsAllLabelsNumeric <- labelsToNumeric(tweetsAll)
tweets <- partitionData(tweetsAllLabelsNumeric)
dim(tweets$train)
dim(tweets$test)
politicsData <- tweets
tfData <- prepareTfIdfWithLabels(politicsData)
lda <- calculateLDA(tfData, topic_number)
lda
setwd('C:/doc/s/sem2/chudy/repo/pub_lda')
source('./preprocessing_2.R')
source('./dimRed.R')
source('./classification.R')
tree_number <- 500
topic_number <- 30
filePath = 'C:/doc/s/sem2/chudy/repo/pub_lda/politiciants data.csv'
tweetsAll <- cleanData(filePath)
tweetsAllLabelsNumeric <- labelsToNumeric(tweetsAll)
tfIdfWithLabels <- prepareTfIdfWithLabels(tweetsAllLabelsNumeric)
partitioned <- partitionData(tfIdfWithLabels)
tfIdfWithLabels
tfIdfWithLabels$tfIdfMatrix
setwd('C:/doc/s/sem2/chudy/repo/pub_lda')
source('./preprocessing.R')
setwd('C:/doc/s/sem2/chudy/repo/pub_lda')
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
tree_number <- 500
topic_number <- 30
filePath = 'C:/doc/s/sem2/chudy/repo/pub_lda/preprocessing_test_apps.csv'
tweetsAll <- cleanData(filePath)
filePath = 'C:/doc/s/sem2/chudy/repo/pub_lda/apps_desc.csv'
tweetsAll <- cleanData(filePath)
dataAll
dataAll <- cleanData(filePath)
dataAll[1:10,]
dataAll[1:2,]
dataAll[1,1]
dataAll[1,2]
dataAll[2,2]
dataAll[3,2]
dataAll[4,2]
dataAll <- cleanData(filePath)
dataAll[1,1]
unique(dataAll[,1])
length(unique(dataAll[,1]))
c(0:24)
labelMapping <- data.frame(message = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
source('./preprocessing.R')
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
labelMapping <- data.frame(text = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
source('./preprocessing.R')
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
dataAllLabelsNumeric
dataAllLabelsNumeric[1:10,]
dataAll
dataAll[1:5,]
dataAll[4,]
dataAll[4,1]
dataAll[4,2]
dataAll[4,3]
dataAll[4,"text"]
dataAll[1:10,"text"]
labelMapping <- data.frame(label = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
source('./preprocessing.R')
labelMapping <- data.frame(label = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
dataAllLabelsNumeric[1:10,]
dataAllLabelsNumeric[1,]
names(dataAllLabelsNumeric)
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = labelMapping
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = "label"
names(dataAllLabelsNumeric)
labelMapping <- data.frame(label = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = "label"
names(dataAllLabelsNumeric)
dim(dataAllLabelsNumeric)
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = "label"
dim(dataAllLabelsNumeric)
partitioned <- partitionData(dataAllLabelsNumeric)
dim(partitioned$train)
dim(partitioned$test)
tfData <- prepareTfIdfWithLabels(partitioned)
tfData
topic_number <- 10
lda <- calculateLDA(tfData, topic_number)
source('./dimRed.R')
lda <- calculateLDA(tfData, topic_number)
posterior(lda$topicmodel)[2]
res <- trainAndPredict(tree_number, lda$ldaTrainData, tfData$cleanedTrainLabels,
lda$ldaTestData, tfData$cleanedTestLabels)
plotResults(res$testResult$threshold, res$testResult$bridgeRatio, res$testResult$errorRatio)
source('./validation.R')
plotResults(res$testResult$threshold, res$testResult$bridgeRatio, res$testResult$errorRatio)
res$model
topic_number <- 30
lda <- calculateLDA(tfData, topic_number)
posterior(lda$topicmodel)[2]
res <- trainAndPredict(tree_number, lda$ldaTrainData, tfData$cleanedTrainLabels,
lda$ldaTestData, tfData$cleanedTestLabels)
plotResults(res$testResult$threshold, res$testResult$bridgeRatio, res$testResult$errorRatio)
tree_number <- 2000
res <- trainAndPredict(tree_number, lda$ldaTrainData, tfData$cleanedTrainLabels,
lda$ldaTestData, tfData$cleanedTestLabels)
plotResults(res$testResult$threshold, res$testResult$bridgeRatio, res$testResult$errorRatio)
res$model
help(randomForest)
source('./classification.R')
res <- trainAndPredict(tree_number, lda$ldaTrainData, tfData$cleanedTrainLabels,
lda$ldaTestData, tfData$cleanedTestLabels)
res$model
dataAll[1,]
dataAll[2,]
dataAll[1,]
dataAll[2,]
data <- read.csv(filePath, sep=";")
dim(data)
dataAll <- cleanData(data)
source('./preprocessing.R')
data <- read.csv(filePath, sep=";")
dim(data)
dataAll <- cleanData(data)
labelMapping <- data.frame(label = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = "label"
dim(dataAllLabelsNumeric)
partitioned <- partitionData(dataAllLabelsNumeric)
dim(partitioned$train)
dim(partitioned$test)
tfData <- prepareTfIdfWithLabels(partitioned)
lda <- calculateLDA(tfData, topic_number)
topic_number <- 10
posterior(lda$topicmodel)[2]
res <- trainAndPredict(tree_number, lda$ldaTrainData, tfData$cleanedTrainLabels,
lda$ldaTestData, tfData$cleanedTestLabels)
plotResults(res$testResult$threshold, res$testResult$bridgeRatio, res$testResult$errorRatio)
res$model
dataAll <- cleanData(data)
dataAll[2,2]
source('./preprocessing.R')
dataAll <- cleanData(data)
dataAll[2,2]
source('./preprocessing.R')
dataAll <- cleanData(data)
dataAll[2,2]
source('./preprocessing.R')
dataAll <- cleanData(data)
source('./preprocessing.R')
help(gsub)
source('./preprocessing.R')
dataAll <- cleanData(data)
source('./preprocessing.R')
dataAll <- cleanData(data)
dataAll[2,2]
help(tm)
library(tm)
help(tm)
source('./preprocessing.R')
dataAll <- cleanData(data)
data$text <- tm_map(data$text, stripWhitespace)
library("tm")
data$text <- tm_map(data$text, stripWhitespace)
source('./preprocessing.R')
data <- read.csv(filePath, sep=";")
dim(data)
dataAll <- cleanData(data)
source('./preprocessing.R')
data <- read.csv(filePath, sep=";")
dim(data)
dataAll <- cleanData(data)
labelMapping <- data.frame(label = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = "label"
dim(dataAllLabelsNumeric)
partitioned <- partitionData(dataAllLabelsNumeric)
dim(partitioned$train)
dim(partitioned$test)
tfData <- prepareTfIdfWithLabels(partitioned)
source('./preprocessing.R')
tfData <- prepareTfIdfWithLabels(partitioned)
source('./preprocessing.R')
tfData <- prepareTfIdfWithLabels(partitioned)
source('./preprocessing.R')
tfData <- prepareTfIdfWithLabels(partitioned)
source('./preprocessing.R')
tfData <- prepareTfIdfWithLabels(partitioned)
source('./preprocessing.R')
tfData <- prepareTfIdfWithLabels(partitioned)
source('./preprocessing.R')
tfData <- prepareTfIdfWithLabels(partitioned)
source('./preprocessing.R')
dataAll <- cleanData(data)
dataAll[1,2]
dataAll[2,2]
data <- read.csv(filePath, sep=";")
dim(data)
data <- read.csv(filePath, sep=";")
dim(data)
dataAll <- cleanData(data)
source('./preprocessing.R')
data <- read.csv(filePath, sep=";")
dim(data)
dataAll <- cleanData(data)
labelMapping <- data.frame(label = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = "label"
dim(dataAllLabelsNumeric)
partitioned <- partitionData(dataAllLabelsNumeric)
dim(partitioned$train)
dim(partitioned$test)
tfData <- prepareTfIdfWithLabels(partitioned)
dataAll[2,2]
source('./preprocessing.R')
data <- read.csv(filePath, sep=";")
dim(data)
dataAll <- cleanData(data)
labelMapping <- data.frame(label = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = "label"
dim(dataAllLabelsNumeric)
dataAll[2,2]
setwd('C:/doc/s/sem2/chudy/repo/pub_lda')
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
source('./validation.R')
library("tm")
tree_number <- 2000
topic_number <- 10
filePath = 'C:/doc/s/sem2/chudy/repo/pub_lda/apps_desc.csv'
data <- read.csv(filePath, sep=";")
dim(data)
dataAll <- cleanData(data)
labelMapping <- data.frame(label = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = "label"
dim(dataAllLabelsNumeric)
partitioned <- partitionData(dataAllLabelsNumeric)
dim(partitioned$train)
dim(partitioned$test)
tfData <- prepareTfIdfWithLabels(partitioned)
lda <- calculateLDA(tfData, topic_number)
posterior(lda$topicmodel)[2]
res <- trainAndPredict(tree_number, lda$ldaTrainData, tfData$cleanedTrainLabels,
lda$ldaTestData, tfData$cleanedTestLabels)
res$model
plotResults(res$testResult$threshold, res$testResult$bridgeRatio, res$testResult$errorRatio)
res_full <- trainAndPredict(tree_number, tfData$cleanedTrainMatrix, tfData$cleanedTrainLabels,
tfData$cleanedTestMatrix, tfData$cleanedTestLabels)
tree_number <- 500
res_full <- trainAndPredict(tree_number, tfData$cleanedTrainMatrix, tfData$cleanedTrainLabels,
tfData$cleanedTestMatrix, tfData$cleanedTestLabels)
dim(tfData$cleanedTrainMatrix)
dim(tfData$cleanedTestMatrix)
tfData <- prepareTfIdfWithLabels(partitioned, sparseLevel=0.9)
dim(tfData$cleanedTrainMatrix)
tfData <- prepareTfIdfWithLabels(partitioned, sparseLevel=0.95)
dim(tfData$cleanedTrainMatrix)
tfData <- prepareTfIdfWithLabels(partitioned, sparseLevel=0.99)
dim(tfData$cleanedTrainMatrix)
tfData <- prepareTfIdfWithLabels(partitioned, sparseLevel=0.98)
dim(tfData$cleanedTrainMatrix)
dim(tfData$cleanedTestMatrix)
tree_number
length(tfData$cleanedTrainLabels)
length(tfData$cleanedTestLabels)
tree_number
res_full <- trainAndPredict(tree_number, tfData$cleanedTrainMatrix, tfData$cleanedTrainLabels,
tfData$cleanedTestMatrix, tfData$cleanedTestLabels)
source('./classification.R')
res_full <- trainAndPredict(tree_number, tfData$cleanedTrainMatrix, tfData$cleanedTrainLabels,
tfData$cleanedTestMatrix, tfData$cleanedTestLabels)
res_full$model
lda <- calculateLDA(tfData, topic_number)
dim(tfData$cleanedTrainMatrix)
res_full$duration
lda <- calculateLDA(tfData, 30)
posterior(lda$topicmodel)[2]
res_lda <- trainAndPredict(tree_number, lda$ldaTrainData, tfData$cleanedTrainLabels,
lda$ldaTestData, tfData$cleanedTestLabels)
plotResults(res_lda$testResult$threshold, res_lda$testResult$bridgeRatio, res_lda$testResult$errorRatio)
res_lda$model
res_lda$duration
tfData
lsa_train_tdidf <- createLSATrain(tfidfData$cleanedTrainMatrix)
source('./dimRed.R')
lsa_train_tdidf <- createLSATrain(tfidfData$cleanedTrainMatrix)
setwd('C:/doc/s/sem2/chudy/repo/pub_lda')
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
source('./validation.R')
library("tm")
tree_number <- 500
topic_number <- 10
filePath = 'C:/doc/s/sem2/chudy/repo/pub_lda/apps_desc.csv'
data <- read.csv(filePath, sep=";")
dim(data)
dataAll <- cleanData(data)
labelMapping <- data.frame(label = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = "label"
dim(dataAllLabelsNumeric)
partitioned <- partitionData(dataAllLabelsNumeric)
dim(partitioned$train)
dim(partitioned$test)
tfidfData <- prepareTfIdfWithLabels(partitioned, sparseLevel=0.98)
dim(tfidfData$cleanedTrainMatrix)
length(tfidfData$cleanedTrainLabels)
dim(tfidfData$cleanedTestMatrix)
length(tfidfData$cleanedTestLabels)
tree_number
lsa_train_tdidf <- createLSATrain(tfidfData$cleanedTrainMatrix)
lsa_train_tdidf <- createLSATrain(tfidfData$cleanedTrainMatrix)
source('./dimRed.R')
lsa_train_tdidf <- createLSATrain(tfidfData$cleanedTrainMatrix)
lsa.training.set.tfidf = lsa_train_tdidf$matrix
dim(lsa.training.set.tfidf)
lsa_test_tdidf <- createLSATest(tfidfData$cleanedTestMatrix, lsa_train_tdidf$lsa)
lsa.testing.set.tfidf = lsa_test_tdidf$matrix
dim(lsa.testing.set.tfidf)
res_lsa <- trainAndPredict(tree_number, lsa.testing.set.tfidf, tfidfData$cleanedTrainLabels,
lsa.testing.set.tfidf, tfidfData$cleanedTestLabels)
dim(lsa.training.set.tfidf)
dim(lsa.testing.set.tfidf)
dim(lsa.training.set.tfidf)
length(tfidfData$cleanedTrainLabels)
dim(lsa.testing.set.tfidf)
length(tfidfData$cleanedTestLabels)
res_lsa <- trainAndPredict(tree_number, lsa.testing.set.tfidf, tfidfData$cleanedTrainLabels,
lsa.testing.set.tfidf, tfidfData$cleanedTestLabels)
source('C:/doc/s/sem2/chudy/repo/pub_lda/preprocessing_test_apps.R')
source('C:/doc/s/sem2/chudy/repo/pub_lda/classification.R')
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
source('./validation.R')
library("tm")
dim(lsa.testing.set.tfidf)
dim(lsa.testing.set.tfidf)
length(tfidfData$cleanedTrainLabels)
dim(lsa.training.set.tfidf)
length(tfidfData$cleanedTrainLabels)
res_lsa <- trainAndPredict(tree_number=tree_number,
trainData=lsa.training.set.tfidf, trainLabels=tfidfData$cleanedTrainLabels,
testData=lsa.testing.set.tfidf, testLabels=tfidfData$cleanedTestLabels)
res_lsa <- trainAndPredict(tree_number=tree_number,
trainData=lsa.training.set.tfidf, trainLabels=tfidfData$cleanedTrainLabels,
testData=lsa.testing.set.tfidf, testLabels=tfidfData$cleanedTestLabels)
out_for_threshold
res_lsa <- trainAndPredict(tree_number=tree_number,
trainData=lsa.training.set.tfidf, trainLabels=tfidfData$cleanedTrainLabels,
testData=lsa.testing.set.tfidf, testLabels=tfidfData$cleanedTestLabels)
res_lsa <- trainAndPredict(tree_number=tree_number,
trainData=lsa.training.set.tfidf, trainLabels=tfidfData$cleanedTrainLabels,
testData=lsa.testing.set.tfidf, testLabels=tfidfData$cleanedTestLabels)
length(indices_for_threshold)
indices_for_threshold
source('C:/doc/s/sem2/chudy/repo/pub_lda/./classification.R')
