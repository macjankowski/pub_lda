Amat <- rbind( c(1,-1,1,1,0),
c(1,-1,1,0,1),
c(1,-1,0,1,1),
c(0,0,1,1,1))
bvec <- c(3/4, 3/4, 3/4, 1)
solveLP( cvec, bvec, Amat, const.dir =
c( ">=", ">=", ">=", "==" ), lpSolve=TRUE)
library(linprog)
cvec <- c(1,-1,0,0,0)
Amat <- rbind( c(1,-1,1,1,0),
c(1,-1,1,0,1),
c(1,-1,0,1,1),
c(0,0,1,1,1))
bvec <- c(3/4, 3/4, 3/4, 1)
solveLP( cvec, bvec, Amat, const.dir =
c( ">=", ">=", ">=", "==" ), lpSolve=TRUE)
library(linprog)
cvec <- c(1,-1,0,0,0)
Amat <- rbind( c(1,-1,1,1,0),
c(1,-1,1,0,1),
c(1,-1,0,1,1),
c(0,0,1,1,1))
bvec <- c(4/5, 1/10, 1/10, 1)
solveLP( cvec, bvec, Amat, const.dir =
c( ">=", ">=", ">=", "==" ), lpSolve=TRUE)
help(lsa)
library(lsa)
library(lsa)
install.packages("lsa")
library(lsa)
help(lsa)
rep(1,10)
c(rep(1,10), rep(2,10), rep(3,10),rep(4,10))
d <- c(rep(1,10), rep(2,10), rep(3,10),rep(4,10))
hist(d)
d <- c(rep(1,10), rep(2,10), rep(3,10),rep(4,10))
hist(d, breaks=100)
d <- c(rep(1,10), rep(2,10), rep(3,10),rep(4,10))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(-2,2)))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(-2,6)))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5)))
d <- c(rep(1,10), rep(2,10), rep(3,10),rep(4,10))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5)))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5), breaks=100))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5), breaks=30))
d <- c(rep(1,10), rep(2,10), rep(3,10),rep(4,10),rep(5,10), rep(6,10), rep(7,10),rep(8,10),
rep(9,10), rep(10,10), rep(11,10),rep(12,10),rep(13,10), rep(14,10), rep(15,10),rep(16,10))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5), breaks=30))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5), breaks=100))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,20), breaks=100))
d <- c(rep(1,5), rep(2,10), rep(3,7),rep(4,8),rep(5,3), rep(6,15), rep(7,9),rep(8,8),
rep(9,4), rep(10,11), rep(11,12),rep(12,11),rep(13,5), rep(14,9), rep(15,6),rep(16,10))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,20), breaks=100))
d <- c(rep(1,10), rep(2,10), rep(3,10),rep(4,10))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5), breaks=30))
d <- c(rep(1,5), rep(2,10), rep(3,8),rep(4,13))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5), breaks=30))
hist(d, breaks=100)
d <- c(rep(1,5), rep(2,10), rep(3,8),rep(4,13))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5), breaks=30))
setwd('C:/doc/s/sem2/chudy/repo/pub_lda')
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
source('./validation.R')
tree_number <- 500
filePath = 'C:/doc/s/sem2/chudy/repo/pub_lda/apps_desc.csv'
data <- read.csv(filePath, sep=";")
topic_number <- 10
dim(data)
dataAll <- cleanData(data)
labelMapping <- data.frame(label = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = "label"
dim(dataAllLabelsNumeric)
partitioned <- partitionData(dataAllLabelsNumeric)
dim(partitioned$train)
dim(partitioned$test)
tfidfData <- prepareTfIdfWithLabels(partitioned, sparseLevel=0.98)
setwd('C:/doc/s/sem2/chudy/repo/pub_lda')
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
source('./validation.R')
tree_number <- 500
topic_number <- 10
filePath = 'C:/doc/s/sem2/chudy/repo/pub_lda/apps_desc.csv'
data <- read.csv(filePath, sep=";")
dim(data)
dataAll <- cleanData(data)
labelMapping <- data.frame(label = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = "label"
dim(dataAllLabelsNumeric)
partitioned <- partitionData(dataAllLabelsNumeric)
dim(partitioned$train)
dim(partitioned$test)
tfidfData <- prepareTfIdfWithLabels(partitioned, sparseLevel=0.98)
lsa_train_tdidf <- createLSATrain(tfidfData$cleanedTrainMatrix)
lsa.training.set.tfidf = lsa_train_tdidf$matrix
dim(lsa.training.set.tfidf)
length(tfidfData$cleanedTrainLabels)
lsa_test_tdidf <- createLSATest(tfidfData$cleanedTestMatrix, lsa_train_tdidf$lsa)
lsa.testing.set.tfidf = lsa_test_tdidf$matrix
dim(lsa.testing.set.tfidf)
length(tfidfData$cleanedTestLabels)
dim(lsa.training.set.tfidf)
length(tfidfData$cleanedTrainLabels)
res_lsa <- trainAndPredict(tree_number=tree_number,
trainData=lsa.training.set.tfidf, trainLabels=tfidfData$cleanedTrainLabels,
testData=lsa.testing.set.tfidf, testLabels=tfidfData$cleanedTestLabels)
res_lsa <- trainAndPredict(tree_number=tree_number,
trainData=lsa.training.set.tfidf, trainLabels=tfidfData$cleanedTrainLabels,
testData=lsa.testing.set.tfidf, testLabels=tfidfData$cleanedTestLabels)
out
test_code
test_code_for_threshold
which.max
apply(out_for_threshold,1, which.max)
length(indices_for_threshold)
source('./classification.R')
res_lsa <- trainAndPredict(tree_number=tree_number,
trainData=lsa.training.set.tfidf, trainLabels=tfidfData$cleanedTrainLabels,
testData=lsa.testing.set.tfidf, testLabels=tfidfData$cleanedTestLabels)
dim(out)
dim(testMatrix)
res_lsa <- trainAndPredict(tree_number=tree_number,
trainData=lsa.training.set.tfidf, trainLabels=tfidfData$cleanedTrainLabels,
testData=lsa.testing.set.tfidf, testLabels=tfidfData$cleanedTestLabels)
which.max(c(2,1,5,3,6,3,2))
res_lsa <- trainAndPredict(tree_number=tree_number,
trainData=lsa.training.set.tfidf, trainLabels=tfidfData$cleanedTrainLabels,
testData=lsa.testing.set.tfidf, testLabels=tfidfData$cleanedTestLabels)
source('C:/doc/s/sem2/chudy/repo/pub_lda/./classification.R')
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
source('./validation.R')
res_lsa <- trainAndPredict(tree_number=tree_number,
trainData=lsa.training.set.tfidf, trainLabels=tfidfData$cleanedTrainLabels,
testData=lsa.testing.set.tfidf, testLabels=tfidfData$cleanedTestLabels)
plotResults(res_lsa$testResult$threshold, res_lsa$testResult$bridgeRatio, res_lsa$testResult$errorRatio)
res_lda_10$model
res_lsa$model
help(lsa)
lsa_train_tdidf <- createLSATrain(tfidfData$cleanedTrainMatrix, dims=30)
source('./preprocessing.R')
lsa_train_tdidf <- createLSATrain(tfidfData$cleanedTrainMatrix, dims=30)
source('./dimRed.R')
lsa_train_tdidf <- createLSATrain(tfidfData$cleanedTrainMatrix, dims=30)
lsa.training.set.tfidf = lsa_train_tdidf$matrix
lsa_test_tdidf <- createLSATest(tfidfData$cleanedTestMatrix, lsa_train_tdidf$lsa)
lsa.testing.set.tfidf = lsa_test_tdidf$matrix
res_lsa <- trainAndPredict(tree_number=tree_number,
trainData=lsa.training.set.tfidf, trainLabels=tfidfData$cleanedTrainLabels,
testData=lsa.testing.set.tfidf, testLabels=tfidfData$cleanedTestLabels)
plotResults(res_lsa$testResult$threshold, res_lsa$testResult$bridgeRatio, res_lsa$testResult$errorRatio)
res_lsa$model
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
source('./validation.R')
source('./chooseModel.R')
setwd('C:/doc/s/sem2/chudy/repo/pub_lda')
source('./chooseModel.R')
dir
dir()
source('./choose_model.R')
res <- estimateTopicsCount(2,10,5, tfidfData)
source('./choose_model.R')
res <- estimateTopicsCount(2,10,5, tfidfData)
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
source('./choose_model.R')
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
dim(lsa$lsaTrainData)
length(tfidfData$cleanedTrainLabels)
dim(lsa$lsaTestData)
dim(tfidfData$cleanedTestLabels)
length(tfidfData$cleanedTestLabels)
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
source('./validation.R')
source('./choose_model.R')
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
source('./dimRed.R')
source('./classification.R')
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
source('./validation.R')
source('./choose_model.R')
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
dim(trainData)
dim(trainLabels)
length(trainLabels)
tree_number
dim(testData)
length(testLabels)
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
dim(out)
length(out)
out
testLabels
length(testLabels)
out
length(out)
testLabels
out
testLabels
out
testLabels
tfidfData$cleanedTestLabels
tfidfData$cleanedTrainLabels
filePath = 'C:/doc/s/sem2/chudy/repo/pub_lda/apps_desc.csv'
data <- read.csv(filePath, sep=";")
dim(data)
dataAll <- cleanData(data)
labelMapping <- data.frame(label = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = "label"
dim(dataAllLabelsNumeric)
partitioned <- partitionData(dataAllLabelsNumeric)
dim(partitioned$train)
dim(partitioned$test)
tfidfData <- prepareTfIdfWithLabels(partitioned, sparseLevel=0.98)
dim(tfidfData$cleanedTrainMatrix)
length(tfidfData$cleanedTrainLabels)
dim(tfidfData$cleanedTestMatrix)
length(tfidfData$cleanedTestLabels)
tfidfData$cleanedTestLabels
tfidfData$cleanedTrainLabels
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
source('./validation.R')
source('./choose_model.R')
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
tfidfData$cleanedTestLabels
tfidfData$cleanedTrainLabels
tfidfData$cleanedTestLabels
tfidfData
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
setwd('C:/doc/s/sem2/chudy/repo/pub_lda')
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
source('./validation.R')
source('./choose_model.R')
tree_number <- 500
topic_number <- 10
filePath = 'C:/doc/s/sem2/chudy/repo/pub_lda/apps_desc.csv'
data <- read.csv(filePath, sep=";")
dim(data)
dataAll <- cleanData(data)
labelMapping <- data.frame(label = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = "label"
dim(dataAllLabelsNumeric)
partitioned <- partitionData(dataAllLabelsNumeric)
dim(partitioned$train)
dim(partitioned$test)
tfidfData <- prepareTfIdfWithLabels(partitioned, sparseLevel=0.98)
tfidfData$cleanedTestLabels
partitioned <- partitionData(dataAllLabelsNumeric)
dim(partitioned$train)
dim(partitioned$test)
tfidfData <- prepareTfIdfWithLabels(partitioned, sparseLevel=0.98)
tfidfData$cleanedTestLabels
tfidfData$cleanedTrainLabels
partitioned <- partitionData(dataAllLabelsNumeric)
tfidfData <- prepareTfIdfWithLabels(partitioned, sparseLevel=0.98)
tfidfData$cleanedTestLabels
lsa_matrices <- calculateLSA(tfidfData, dims=30)
lsa.training.set.tfidf <- lsa_matrices$lsaTrainData
dim(tfidfData$cleanedTrainMatrix)
length(tfidfData$cleanedTrainLabels)
dim(tfidfData$cleanedTestMatrix)
length(tfidfData$cleanedTestLabels)
tree_number
lsa_matrices <- calculateLSA(tfidfData, dims=30)
source('./dimRed.R')
lsa_matrices <- calculateLSA(tfidfData, dims=30)
lsa_matrices <- calculateLSA(tfidfData, topic_number=30)
lsa.training.set.tfidf <- lsa_matrices$lsaTrainData
lsa.testing.set.tfidf <- lsa_matrices$lsaTestData
res_lsa <- trainAndPredict(tree_number=tree_number,
trainData=lsa.training.set.tfidf, trainLabels=tfidfData$cleanedTrainLabels,
testData=lsa.testing.set.tfidf, testLabels=tfidfData$cleanedTestLabels)
plotResults(res_lsa$testResult$threshold, res_lsa$testResult$bridgeRatio, res_lsa$testResult$errorRatio)
res_lsa$model
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
length(out)
length(testLabels)
out
tfidfData$cleanedTrainLabels
tfidfData$cleanedTestLabels
factor(tfidfData$cleanedTestLabels, levels=c(0:24))
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
tfidfData$cleanedTestLabels <- factor(tfidfData$cleanedTestLabels, levels=c(0:24))
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
setwd('C:/doc/s/sem2/chudy/repo/pub_lda')
source('./preprocessing.R')
source('./dimRed.R')
source('./classification.R')
source('./validation.R')
source('./choose_model.R')
tree_number <- 500
topic_number <- 10
filePath = 'C:/doc/s/sem2/chudy/repo/pub_lda/apps_desc.csv'
data <- read.csv(filePath, sep=";")
dim(data)
dataAll <- cleanData(data)
labelMapping <- data.frame(label = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = "label"
dim(dataAllLabelsNumeric)
partitioned <- partitionData(dataAllLabelsNumeric)
dim(partitioned$train)
dim(partitioned$test)
tfidfData <- prepareTfIdfWithLabels(partitioned, sparseLevel=0.98)
lsa_matrices <- calculateLSA(tfidfData, topic_number=30)
lsa.training.set.tfidf <- lsa_matrices$lsaTrainData
lsa.testing.set.tfidf <- lsa_matrices$lsaTestData
res_lsa <- trainAndPredict(tree_number=tree_number,
trainData=lsa.training.set.tfidf, trainLabels=tfidfData$cleanedTrainLabels,
testData=lsa.testing.set.tfidf, testLabels=tfidfData$cleanedTestLabels)
plotResults(res_lsa$testResult$threshold, res_lsa$testResult$bridgeRatio, res_lsa$testResult$errorRatio)
res_lsa$model
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
source('./choose_model.R')
res <- estimateTopicsCount(2,10,5, tfidfData = tfidfData, tree_number = tree_number)
res
res <- estimateTopicsCount(2,400,5, tfidfData = tfidfData, tree_number = tree_number)
res
errors <- res$rfResult
par(new=TRUE)
plot(result$topics, errors, type = "l", main = "Estymacja liczby tematów/czasu działania", xlab = "Liczba tematów",
ylab = "Poziom błędu (%)/czas działania", col="black", col.axis = "dimgray", col.lab = "blueviolet")
topics = seq(from = 2, to = 400, by = 5)
plot(topics, errors, type = "l", main = "Estymacja liczby tematów/czasu działania", xlab = "Liczba tematów",
ylab = "Poziom błędu (%)/czas działania", col="black", col.axis = "dimgray", col.lab = "blueviolet")
par(new=TRUE)
dev.new()
plot(topics, errors, type = "l", main = "Estymacja liczby tematów/czasu działania", xlab = "Liczba tematów",
ylab = "Poziom błędu (%)/czas działania", col="black", col.axis = "dimgray", col.lab = "blueviolet")
errors
min(errors)
c(errors)
errors
as.list(errors)
as.vector(errors)
unlist(errors)
min(unlist(errors))
which.min(unlist(errors))
res <- estimateTopicsCount(2,1000,5, tfidfData = tfidfData, tree_number = tree_number)
topics = seq(from = 2, to = 1000, by = 5)
errors <- res$rfResult
dev.new()
plot(topics, errors, type = "l", main = "Performance", xlab = "Topics number",
ylab = "Error rateon test data", col="black", col.axis = "dimgray", col.lab = "blueviolet")
dev.new()
plot(topics, errors, type = "l", main = "Performance", xlab = "Topics number",
ylab = "Error rate on test data", col="black", col.axis = "dimgray", col.lab = "blueviolet")
topics[7]
lsa_matrices <- calculateLSA(tfidfData, topic_number=32)
lsa.training.set.tfidf <- lsa_matrices$lsaTrainData
lsa.testing.set.tfidf <- lsa_matrices$lsaTestData
res_lsa <- trainAndPredict(tree_number=2000,
trainData=lsa.training.set.tfidf, trainLabels=tfidfData$cleanedTrainLabels,
testData=lsa.testing.set.tfidf, testLabels=tfidfData$cleanedTestLabels)
dev.new()
plotResults(res_lsa$testResult$threshold, res_lsa$testResult$bridgeRatio, res_lsa$testResult$errorRatio)
dev.new()
plot(topics, errors, type = "l", main = "Performance", xlab = "Topics number",
ylab = "Error rate on test data", col="black", col.axis = "dimgray", col.lab = "blueviolet")
topics
topics[7]
dev.new()
plot(topics, errors, type = "l", main = "Performance", xlab = "Topics number",
ylab = "Error rate on test data", col="black", col.axis = "dimgray", col.lab = "blueviolet")
max(errors)
errors_vect <- unlist(errors)
max(errors_vect)
help(which)
errors_vect[which(errors_vect = max(errors_vect))]
which(errors_vect = max(errors_vect))
which(errors_vect == max(errors_vect))
which(errors_vect == 5)
max(errors_vect)
which(errors_vect == 0.4710526)
which(errors_vect = 0.4710526)
which(errors_vect == 0.4710526)
which(errors_vect == max(errors_vect))
which(errors_vect == min(errors_vect))
which(errors_vect == max(errors_vect))
max(errors_vect[8:length(errors_vect)])
which(errors_vect == max(errors_vect[8:length(errors_vect)]))
errors_vect[which(errors_vect == max(errors_vect[8:length(errors_vect)]))]
max_index <- which(errors_vect == max(errors_vect[8:length(errors_vect)]))
topics_number_for_max <- topics[max_index]
max_value <- errors_vect[max_index]
topics_number_for_max
max_value <- errors_vect[max_index]
max_value
min_index <- which(errors_vect == max(errors_vect))
min_value <- errors_vect[min_index]
min_value
min_index <- which(errors_vect == min(errors_vect))
min_value <- errors_vect[min_index]
min_value
min_index
min_value <- errors_vect[min_index]
min_value
dev.new()
plot(topics, errors, type = "l", main = "Classification performance for dirrerent values of topic number", xlab = "Topics number",
ylab = "Error rate on test data", col="black", col.axis = "dimgray", col.lab = "blueviolet")
dev.new()
plot(topics, errors, type = "l", main = "Classification performance for dirrerent values of topic number", xlab = "Topics number",
ylab = "Error rate on test data", col="black", col.axis = "black", col.lab = "black")
source('./choose_model.R')
save.image("C:/doc/s/sem2/chudy/repo/session.RData")
res <- estimateTopicsCount4Methods(2,1000,5, tfidfData = tfidfData)
library("ldatuning")
source('./choose_model.R')
res <- estimateTopicsCount4Methods(2,1000,5, tfidfData = tfidfData)
res <- estimateTopicsCount4Methods(2,10,5, tfidfData = tfidfData)
res$duration
res <- estimateTopicsCount4Methods(2,100,5, tfidfData = tfidfData)
topics = seq(from = 2, to = 100, by = 5)
errors <- res$ldatuningResults
result <- res$ldatuningResults
dev.new()
plot(result$topics, result$Griffiths2004,type = "l", col="blue", xlab = "", ylab="")
par(new=TRUE)
plot(result$topics, result$CaoJuan2009,type = "l", col="red", xlab = "", ylab="")
par(new=TRUE)
plot(result$topics, result$Arun2010,type = "l", col="green", xlab = "", ylab="")
par(new=TRUE)
plot(result$topics, result$Deveaud2014,type = "l", col="violet", xlab = "", ylab="")
dev.new()
plot(result$topics, result$Griffiths2004,type = "l", col="blue", xlab = "", ylab="")
save.image("C:/doc/s/sem2/chudy/repo/session_estimate_topic_count_4.RData")
dev.new()
plot(result$topics, result$Griffiths2004,type = "l", col="black", xlab = "", ylab="")
c(50, 100, 200, 300, 400, 500, 600, 1,000)
c(50, 100, 200, 300, 400, 500, 600, 1000)
source('./choose_model.R')
gryffith_res <- estimateTopicsCount4MethodsRange(c(50, 100, 200, 300, 400, 500, 600, 1000),
tfidfData = tfidfData, methods = c("Griffiths2004"))
plot(gryffith_result$topics, gryffith_result$Griffiths2004,type = "l", col="black", xlab = "", ylab="")
gryffith_topics = c(50, 100, 200, 300, 400, 500, 600, 1000)
gryffith_result <- gryffith_res$ldatuningResults
dev.new()
plot(gryffith_result$topics, gryffith_result$Griffiths2004,type = "l", col="black", xlab = "", ylab="")
gryffith_result$durarion
gryffith_res$duration
plot(result$topics, result$Griffiths2004,type = "l", col="black", xlab = "", ylab="",main = "Classification performance for dirrerent values of topic number")
plot(gryffith_result$topics, gryffith_result$Griffiths2004,type = "l", col="black", xlab = "", ylab="", main = "Classification performance for dirrerent values of topic number")
dev.new()
plot(gryffith_result$topics, gryffith_result$Griffiths2004,type = "l", col="black", xlab = "", ylab="", main = "Classification performance for dirrerent values of topic number")
dev.new()
plot(gryffith_result$topics, gryffith_result$Griffiths2004,type = "l", col="black", xlab = "log(C|K)", ylab="", main = "Classification performance for dirrerent values of topic number")
dev.new()
plot(gryffith_result$topics, gryffith_result$Griffiths2004,type = "l", col="black", xlab = "Topics number", ylab="log(C|K)", main = "Classification performance for dirrerent values of topic number")
range = c(2,5,10, 15, 20, 30, 50, 75, 100, 150, 200, 300, 400, 500, 600, 1000)
all_res <- estimateTopicsCount4MethodsRange(range, tfidfData = tfidfData)
dev.new()
plot(all_result$topics, all_result$Griffiths2004,type = "l", col="black", xlab = "Topics number", ylab="log(C|K)", main = "Classification performance for dirrerent values of topic number")
all_topics = range
all_result <- all_res$ldatuningResults
dev.new()
plot(all_result$topics, all_result$Griffiths2004,type = "l", col="black", xlab = "Topics number", ylab="log(C|K)", main = "Classification performance for dirrerent values of topic number")
save.image("C:/doc/s/sem2/chudy/repo/session_estimate_topic_count_4_1000.RData")
dev.new()
plot(all_result$topics, all_result$CaoJuan2009,type = "l", col="black", xlab = "Topics number", ylab="log(C|K)", main = "Classification performance for dirrerent values of topic number")
dev.new()
plot(all_result$topics, all_result$CaoJuan2009,type = "l", col="black", xlab = "Topics number",
ylab="log(C|K)", main = "J. Cao et al")
dev.new()
plot(all_result$topics, all_result$CaoJuan2009,type = "l", col="black", xlab = "Topics number",
ylab="", main = "")
dev.new()
plot(all_result$topics, all_result$Arun2010,type = "l", col="black", xlab = "Topics number",
ylab="", main = "")
